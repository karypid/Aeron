/*
 * Copyright 2014-2017 Real Logic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.4' apply false
}

defaultTasks 'clean', 'build', 'shadowJar', 'install'

def aeronGroup = 'io.aeron.karypid'
def aeronVersion = file('version.txt').text.trim()

group = aeronGroup
version = aeronVersion
ext.isReleasedVersion = !version.endsWith("SNAPSHOT")

ext {
    group = aeronGroup
    version = aeronVersion

    if (!project.hasProperty('repositoryUser')) {
        repositoryUser = 'mydeployer'
    }

    if (!project.hasProperty('repositoryPass')) {
        repositoryPass = 'mydeployer'
    }
    
    if (!project.hasProperty('repositoryReleaseUrl')) {
        repositoryReleaseUrl = 'http://localhost:8081/repository/my-releases/'
    }

    if (!project.hasProperty('repositorySnapshotUrl')) {
        repositorySnapshotUrl = 'http://localhost:8081/repository/my-snapshots/'
    }
}

def projectPom = {
    name = 'aeron'
    packaging = 'pom'
    // optionally artifactId can be defined here
    description = 'Efficient reliable UDP unicast, UDP multicast, and IPC transport protocol.'
    url = 'https://github.com/real-logic/aeron'

    scm {
        connection = 'scm:git:https://github.com/real-logic/aeron.git'
        developerConnection = 'scm:git:https://github.com/real-logic/aeron.git'
        url = 'https://github.com/real-logic/aeron.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'tmontgomery'
            name = 'Todd L. Montgomery'
            email = 'tmont@nard.net'
            url = 'https://github.com/tmontgomery'
        }
        developer {
            id = 'mjpt777'
            name = 'Martin Thompson'
            email = 'mjpt777@gmail.com'
            url = 'https://github.com/mjpt777'
        }
        developer {
            id = 'RichardWarburton'
            name = 'Richard Warburton'
            email = 'richard.warburton@gmail.com'
            url = 'https://github.com/RichardWarburton'
        }
        developer {
            id = 'nitsanw'
            name = 'Nitsan Wakart'
            email = 'nitsanw@yahoo.com'
            url = 'https://github.com/nitsanw'
        }
    }
}

configurations {
    shadow
}

jar.enabled = false

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'signing'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'eclipse'

    group = aeronGroup
    version = aeronVersion

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    jar.enabled = true

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "http://sevntu-checkstyle.github.com/sevntu.checkstyle/maven2"
        }
    }

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:7.8.2'
        checkstyle 'com.github.sevntu.checkstyle:sevntu-checks:1.23.1'

        testCompile(
                'org.hamcrest:hamcrest-all:1.3',
                'junit:junit:4.12',
                'org.mockito:mockito-core:2.8.47')
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
        toolVersion = '7.8.2'
    }

    test {
        testLogging {
            //events 'passed', 'skipped', 'failed'
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, " +
                            "${result.successfulTestCount} successes, " +
                            "${result.failedTestCount} failures, " +
                            "${result.skippedTestCount} skipped)"
                }
            }
        }
    }

    javadoc {
        title = '<h1>Aeron Transport Protocol</h1>'
        options.bottom = '<i>Copyright &#169; 2014-2017 Real Logic Ltd. All Rights Reserved.</i>'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    jar {
        manifest.attributes(
                'Implementation-Title' : 'Aeron',
                'Implementation-Version' : "${aeronVersion}",
                'Implementation-Vendor' : 'Real Logic Limited'
        )
    }

    signing {
        required { isReleasedVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
        sign configurations.shadow
    }
}

def agronaVersion = '0.9.7-SNAPSHOT'

project(':aeron-client') {
    apply plugin: 'osgi'

    dependencies {
        compile "org.agrona:agrona:${agronaVersion}"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-driver') {
    apply plugin: 'application'
    apply plugin: 'osgi'

    mainClassName = 'io.aeron.driver.MediaDriver'

    dependencies {
        compile project(':aeron-client')
        testCompile project(':aeron-client')
    }

    test {
        systemProperties('aeron.event.log': System.properties['aeron.event.log'])
    }

    run {
        systemProperties(System.properties)
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    build.doLast {
        tasks.distZip.execute()
    }
}

project(':aeron-samples') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver'), 'org.hdrhistogram:HdrHistogram:2.1.9'
    }

    shadowJar {
        archiveName = 'samples.jar'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-system-tests') {
    dependencies {
        compile project(':aeron-client'), project(':aeron-driver')
        testCompile project(path: ':aeron-client', configuration: 'tests')
        testCompile project(':aeron-agent')
    }

    test {
        jvmArgs "-javaagent:" + project(':aeron-agent').jar.outputs.files.getSingleFile()
        systemProperties(
                'aeron.term.buffer.sparse.file': 'true',
                'aeron.event.log': System.properties['aeron.event.log'])
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.test.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-agent') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver')
        compile "net.bytebuddy:byte-buddy:1.6.14"
    }

    jar {
        manifest.attributes(
                "Premain-Class": "io.aeron.agent.EventLogAgent",
                "Agent-Class": "io.aeron.agent.EventLogAgent",
                "Can-Redefine-Classes": "true",
                "Can-Retransform-Classes": "true")
    }

    shadowJar {
        dependencies {
            exclude(project(':aeron-client'))
            exclude(project(':aeron-driver'))
            exclude(dependency('org.agrona:agrona'))
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }
    }

    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }

        mustRunAfter 'uploadArchives'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

def sbeVersion = '1.7.1-SNAPSHOT'

project(':aeron-archiver-codecs') {
    apply plugin: 'com.github.johnrengelman.shadow'

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    def projectSrcDir = project(':aeron-archiver-codecs').projectDir.toString();

    dependencies {
        compile "org.agrona:agrona:${agronaVersion}"
        compile "uk.co.real-logic:sbe-tool:${sbeVersion}"
        testCompile sourceSets.generated.output
    }

    // Code Generation Configuration
    compileGeneratedJava.dependsOn 'generateMessages'
    compileGeneratedJava.classpath += sourceSets.main.runtimeClasspath

    task(generateMessages, type: JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties(
                'sbe.output.dir': generatedDir,
                'sbe.target.language': 'Java',
                'sbe.validation.xsd': projectSrcDir + '/src/main/resources/fpl/sbe.xsd',
                'sbe.validation.stop.on.error': 'true')
        args = ['src/main/resources/archiver-codecs-schema.xml']
    }

    jar {
        from("$buildDir/classes/generated") {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava
}

project(':aeron-archiver') {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'idea'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver'), project(':aeron-archiver-codecs')
    }

    shadowJar {
        archiveName = 'aeron-archiver.jar'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    idea {
        dependencies {
            compile project(':aeron-archiver-codecs').sourceSets.generated.output
        }
    }
}

project(':aeron-all') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver'), project(':aeron-samples')
    }

    shadowJar {
        manifest.attributes(
                'Implementation-Title' : 'Aeron',
                'Implementation-Version' : "${aeronVersion}",
                'Implementation-Vendor' : 'Real Logic Limited'
        )
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }
    }

    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "${repositoryReleaseUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                snapshotRepository(url: "${repositorySnapshotUrl}") {
                    authentication(userName: repositoryUser, password: repositoryPass)
                }

                pom.project(projectPom)
            }
        }

        mustRunAfter 'uploadArchives'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from project(':aeron-client').sourceSets.main.allSource
        from project(':aeron-driver').sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from project(':aeron-client').javadoc.destinationDir
        from project(':aeron-driver').javadoc.destinationDir
    }

    shadowJar {
        classifier = ''
        relocate 'org.HdrHistogram', 'io.aeron.shadow.org.HdrHistogram'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

task uploadToMavenCentral {
    dependsOn 'aeron-client:uploadArchives', 'aeron-driver:uploadArchives', 'aeron-samples:uploadArchives',
            'aeron-system-tests:uploadArchives', 'aeron-all:uploadArchives', 'aeron-all:uploadShadow',
            'aeron-agent:uploadArchives', 'aeron-agent:uploadShadow'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
    distributionType = 'ALL'
}
